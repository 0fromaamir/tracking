const express = require("express");
const router = express.Router();
const cameraConfigurationController = require("../controllers/cameraConfigurationController");
const { verifyToken, verifyAdmin } = require("../middleware/authMiddleware");

// üß† Debug middleware (optional but helpful)
router.use((req, res, next) => {
  console.log("üì© [CameraConfig Route Hit]", req.method, req.originalUrl);
  next();
});

// ----------------------------
// üé• Camera Configuration Routes (ordered correctly)
// ----------------------------

// 1Ô∏è‚É£ Create new camera config
router.post("/", verifyToken, verifyAdmin, cameraConfigurationController.createCameraConfig);

// 2Ô∏è‚É£ Update existing camera config
router.put("/:id", verifyToken, verifyAdmin, cameraConfigurationController.updateCameraConfig);

// 3Ô∏è‚É£ Search TimeManagement by class/section/department
router.post("/search", verifyToken, verifyAdmin, cameraConfigurationController.searchTimeManagement);

// 4Ô∏è‚É£ Fetch attendance setup (must come BEFORE :id)
router.get("/attendance/setup", cameraConfigurationController.fetchAttendanceSetup);

// 5Ô∏è‚É£ Get single camera config by ID
router.get("/:id", verifyToken, verifyAdmin, cameraConfigurationController.getCameraConfigById);

// 6Ô∏è‚É£ Delete camera config
router.delete("/:id", verifyToken, verifyAdmin, cameraConfigurationController.deleteCameraConfig);

// 7Ô∏è‚É£ Get all camera configs (keep last)
router.get("/", verifyToken, verifyAdmin, cameraConfigurationController.getAllCameraConfigs);

// ----------------------------
module.exports = router;
